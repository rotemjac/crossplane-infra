---
apiVersion: eks.aws.crossplane.io/v1beta1
kind: Cluster
metadata:
  name: this-eks-cluster
spec:
  forProvider:
    region: us-east-1

    resourcesVpcConfig:
      endpointPrivateAccess: false
      #enpointPublicAccess: true
      subnetIdRefs:
        - name: this-subnet-a
        - name: this-subnet-b
        - name: this-subnet-c

      publicAccessCidrs : ["0.0.0.0/0"]

    roleArnRef:
      name: this-eks-iam-role

    logging:
      clusterLogging:
        - enabled: false
        - types: ["api","audit","authenticator","controllerManager","scheduler"]

    version : "1.19"

  deletionPolicy: Delete
  writeConnectionSecretToRef:
    name: cluster-conn
    namespace: default
  providerConfigRef:
    name: aws-provider-config

---
apiVersion: identity.aws.crossplane.io/v1beta1
kind: IAMRole
metadata:
  labels:
    provider: aws
  name: this-eks-iam-role
spec:
  forProvider:
    assumeRolePolicyDocument: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "eks.amazonaws.com"
            },
            "Action": "sts:AssumeRole"
          }
        ]
      }

  providerConfigRef:
    name: aws-provider-config
  deletionPolicy: Delete
---
apiVersion: identity.aws.crossplane.io/v1beta1
kind: IAMRolePolicyAttachment
metadata:
  name: this-role-servicepolicy
spec:
  forProvider:
    roleNameRef:
      name: this-eks-iam-role
    # wellknown policy arn
    policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy

  providerConfigRef:
    name: aws-provider-config
  deletionPolicy: Delete
---
apiVersion: identity.aws.crossplane.io/v1beta1
kind: IAMRolePolicyAttachment
metadata:
  name: this-role-clusterpolicy
spec:
  forProvider:
    roleNameRef:
      name: this-eks-iam-role
    # wellknown policy arn
    policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  providerConfigRef:
    name: aws-provider-config
  deletionPolicy: Delete